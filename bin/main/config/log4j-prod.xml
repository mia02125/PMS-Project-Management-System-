<?xml version="1.0" encoding="UTF-8"?>
<Configuration status="INFO">
	<!--    해당 설정파일에서 사용하는 프로퍼티-->
	<Properties>
		<Property name="logDir">D:/pems_log</Property>
		<Property name="logDir">/usr/local/tomcat/kubsLogs</Property>
		<Property name="logNm">pems_log</Property>
		<Property name="conversionPattern">%d %5p [%c] %m%n</Property>
	</Properties>

	<!--    LogEvent를 전달해주는 Appender-->
	<Appenders>
		<Console name="Console_Appender" target="SYSTEM_OUT">
			<PatternLayout pattern="${conversionPattern}"/>
		</Console>
		<RollingFile name="File_Appender" fileName="${logDir}/${logNm}.log" filePattern="${logDir}/${logNm}_%d{yyyy-MM-dd}_%i.log.gz">
			<PatternLayout pattern="${conversionPattern}"/>
			<Policies>
				<SizeBasedTriggeringPolicy size="5MB"/>		<!-- 최대 용량 초과시 파일패턴으로 새로 생성 -->
				<TimeBasedTriggeringPolicy interval="1"/>	<!-- 매일 롤오버 -->
			</Policies>
			<DefaultRolloverStrategy max="50" fileIndex="min"/>	<!-- 최대 50개 까지 생성 -->
		</RollingFile>
	</Appenders>


	<!--    실제 Logger-->
	<Loggers>
		<!-- 기본 레벨 -->
		<Root level="INFO" additivity="false">
			<AppenderRef ref="Console_Appender"/>
		</Root>

		<!-- PEMS 시스템만 현재 파일로 생성 -->
		<Logger name="com.c4i.pems" level="TRACE" additivity="false">
			<AppenderRef ref="Console_Appender" />
			<AppenderRef ref="File_Appender"/>
		</Logger>


		<!-- 스프링 프레임워크 관련 -->
		<Logger name="org.springframework" level="INFO" additivity="false">
			<AppenderRef ref="Console_Appender" />
<!--			<AppenderRef ref="File_Appender"/>-->
		</Logger>
		<Logger name="org.springframework.web" level="DEBUG" additivity="false">
			<AppenderRef ref="Console_Appender" />
		</Logger>
		
		<!-- 아이디 없을 시에 에러로그 발생으로 제외  -->
		<Logger name="org.springframework.security" level="OFF" additivity="false">	
			<AppenderRef ref="Console_Appender" />
		</Logger>
		
		<!-- SQL : log4jdbc -->
		<!-- 
			- jdbc.sqlonly 			: SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
 			- jdbc.sqltiming 		: SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
 			- jdbc.audit 			: ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. 
 			- jdbc.resultset 		: ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. 
			- jdbc.resultsettable 	: SQL 결과 조회된 데이터의 table을 로그로 남긴다.
		-->
		<logger name="jdbc" level="OFF"/>
		<logger name="jdbc.sqlonly" level="INFO"/>			<!-- 정렬된 SQL문 -->
		<logger name="jdbc.sqltiming" level="OFF"/>
		<logger name="jdbc.audit" level="OFF"/>
		<logger name="jdbc.resultset" level="OFF"/>
		<logger name="jdbc.resultsettable" level="INFO"/>	<!-- 결과값 테이블형태로 보기 -->
  		<logger name="jdbc.connection" level="OFF"/>
	</Loggers>
</Configuration>